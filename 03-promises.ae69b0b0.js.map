{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAoDA,SAASC,EAAUC,GACjBC,EAAAJ,GAASK,OAAOC,QAAQH,GACxBI,QAAQC,IAAIL,E,CAEd,SAASM,EAAQC,GACfN,EAAAJ,GAASK,OAAOM,QAAQD,GACxBH,QAAQC,IAAIE,E,YAvDD,CACXE,KAAMC,SAASC,cAAc,UAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAMC,EAAaC,OAAOH,EAAII,OAAOC,MAAMC,OACrCC,EAAYJ,OAAOH,EAAII,OAAOI,KAAKF,OACnCG,EAASN,OAAOH,EAAII,OAAOK,OAAOH,OAElCI,EAAc,CAClBL,MAAOH,EAAaK,EACpBI,SAAU,GAGZ,IAAIC,SAAQ,SAAUC,EAASC,GAC7B,IAAMC,EAAaC,aAAY,WAiBnC,IAAuBC,EAAEN,EAAUN,EAhB7BK,EAAYC,UAAY,EACxBD,EAAYL,OAASE,EAEjBG,EAAYC,UAAYF,IAC1BK,EACE1B,EAAAJ,GAASK,OAAO6B,KACd,eAAoCC,OAArBT,EAAYC,SAAS,wBAGxCS,cAAcL,IAEhBF,GAKiBI,EALKP,EAKHC,EAAFM,EAAEN,SAAUN,EAAZY,EAAYZ,MAC1B,IAAIO,SAAQ,SAACC,EAASC,GAC3BO,YAAW,WACaC,KAAKC,SAAW,GAGpCV,EAAQ,uBAAwCM,OAAfR,EAAS,QAAYQ,OAANd,EAAM,OAEpDS,EAAK,sBAAqCK,OAAfR,EAAS,QAAYQ,OAANd,EAAM,M,GAEnDA,E,KAfkCmB,KAAKtC,GAAWuC,MAAMhC,G,MAE1Dc,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  const startValue = Number(evt.target.delay.value);\n  const stepValue = Number(evt.target.step.value);\n  const amount = Number(evt.target.amount.value);\n\n  const promiseData = {\n    delay: startValue - stepValue,\n    position: 0,\n  };\n\n  new Promise(function (resolve, reject) {\n    const intervalId = setInterval(() => {\n      promiseData.position += 1;\n      promiseData.delay += stepValue;\n\n      if (promiseData.position >= amount) {\n        reject(\n          Notiflix.Notify.info(\n            `Creation of ${promiseData.position} promises started `\n          )\n        );\n        clearInterval(intervalId);\n      }\n      resolve(createPromise(promiseData).then(onSuccess).catch(onError));\n    });\n  }, stepValue);\n}\n\nfunction createPromise({ position, delay }) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\nfunction onSuccess(result) {\n  Notiflix.Notify.success(result);\n  console.log(result);\n}\nfunction onError(error) {\n  Notiflix.Notify.failure(error);\n  console.log(error);\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$onSuccess","result","$parcel$interopDefault","Notify","success","console","log","$ce04d3a99e08e73b$var$onError","error","failure","form","document","querySelector","addEventListener","evt","preventDefault","startValue","Number","target","delay","value","stepValue","step","amount","promiseData","position","Promise","resolve","reject","intervalId","setInterval","param","info","concat","clearInterval","setTimeout","Math","random","then","catch"],"version":3,"file":"03-promises.ae69b0b0.js.map"}